package com.mmall.service.impl;import com.google.common.collect.Lists;import com.google.common.collect.Sets;import com.mmall.common.ServerResponse;import com.mmall.dao.CategoryMapper;import com.mmall.pojo.Category;import com.mmall.service.ICategoryService;import lombok.extern.slf4j.Slf4j;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.Set;/** * @author chenqiang * @create 2020-06-29 17:29 */@Service@Slf4jpublic class CategoryServiceImpl implements ICategoryService {    @Autowired    private CategoryMapper categoryMapper;    @Override    public ServerResponse<String> addCategory(String categoryName, Integer parentId) {        if (parentId == null || StringUtils.isBlank(categoryName)) {            return ServerResponse.createByErrorMessage("添加品类参数错误");        }        Category category = new Category();        category.setName(categoryName);        category.setParentId(parentId);        //status设置为true，表示这个分类是可用的        category.setStatus(true);        int rowCount = categoryMapper.insert(category);        if (rowCount > 0) {            return ServerResponse.createBySuccessMessage("添加品类成功");        }        return ServerResponse.createByErrorMessage("添加品类失败");    }    @Override    public ServerResponse<String> setCategoryName(String categoryName, Integer categoryId) {        if (categoryId == null || StringUtils.isBlank(categoryName)) {            return ServerResponse.createByErrorMessage("更新品类参数错误");        }        Category category = new Category();        category.setId(categoryId);        category.setName(categoryName);        int updateCount = categoryMapper.updateByPrimaryKeySelective(category);        if (updateCount > 0) {            return ServerResponse.createBySuccessMessage("更新品类名字成功");        }        return ServerResponse.createByErrorMessage("更新品类名字失败");    }    @Override    public ServerResponse<List<Category>> getChildrenParallelCategory(Integer categoryId) {        List<Category> categoryList = categoryMapper.selectCategoryChildrenByParentId(categoryId);        if (CollectionUtils.isEmpty(categoryList)) {            log.info("未找到当前分类的子分类");        }        return ServerResponse.createBySuccess(categoryList);    }    /**     * 递归查询本节点的ID及孩子节点的ID     *     * @param categoryId     * @return     */    @Override    public ServerResponse<List<Integer>> selectCategoryAndChildrenById(Integer categoryId) {        Set<Category> categorySet = Sets.newHashSet();        findChildCategory(categorySet, categoryId);        List<Integer> categoryList = Lists.newArrayList();        if (categoryId != null) {            for (Category categoryItem : categorySet) {                categoryList.add(categoryItem.getId());            }        }        return ServerResponse.createBySuccess(categoryList);    }    //递归算法，算出子节点    private Set<Category> findChildCategory(Set<Category> categorySet, Integer categoryId) {        Category category = categoryMapper.selectByPrimaryKey(categoryId);        if (category != null) {            categorySet.add(category);        }        //查找子节点，递归算法一定要有一个退出的条件        List<Category> categoryList = categoryMapper.selectCategoryChildrenByParentId(categoryId);        for (Category categoryItem : categoryList) {            findChildCategory(categorySet, categoryItem.getId());        }        return categorySet;    }}