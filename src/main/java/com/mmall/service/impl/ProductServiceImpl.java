package com.mmall.service.impl;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.google.common.collect.Lists;import com.mmall.common.Const;import com.mmall.common.ResponseCode;import com.mmall.common.ServerResponse;import com.mmall.dao.CategoryMapper;import com.mmall.dao.ProductMapper;import com.mmall.pojo.Category;import com.mmall.pojo.Product;import com.mmall.service.ICategoryService;import com.mmall.service.IProductService;import com.mmall.util.DateTimeUtil;import com.mmall.util.PropertiesUtil;import com.mmall.vo.ProductDetailVo;import com.mmall.vo.ProductListVo;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;/** * @author chenqiang * @create 2020-06-30 18:55 */@Servicepublic class ProductServiceImpl implements IProductService {    @Autowired    private ProductMapper productMapper;    @Autowired    private CategoryMapper categoryMapper;    @Autowired    private ICategoryService iCategoryService;    @Override    public ServerResponse saveOrUpdateProduct(Product product) {        if (product != null) {            if (StringUtils.isNotBlank(product.getSubImages())) {                String[] subImageArray = product.getSubImages().split(",");                product.setMainImage(subImageArray[0]);            }            if (product.getId() != null) {                //更新                int rowCount = productMapper.updateByPrimaryKeySelective(product);                if (rowCount > 0) {                    return ServerResponse.createBySuccessMessage("更新商品成功");                }                return ServerResponse.createByErrorMessage("更新商品失败");            } else {                //添加                int rowCount = productMapper.insert(product);                if (rowCount > 0) {                    return ServerResponse.createBySuccessMessage("新增商品成功");                }                return ServerResponse.createByErrorMessage("新增商品失败");            }        }        return ServerResponse.createByErrorMessage("新增或更新商品参数错误");    }    @Override    public ServerResponse<String> setSaleStatus(Integer productId, Integer status) {        if (productId == null || status == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        Product product = new Product();        product.setId(productId);        product.setStatus(status);        int rowCount = productMapper.updateByPrimaryKeySelective(product);        if (rowCount > 0) {            return ServerResponse.createBySuccess("修改产品状态成功");        }        return ServerResponse.createByErrorMessage("修改产品状态失败");    }    @Override    public ServerResponse<ProductDetailVo> manageProductDetail(Integer productId) {        if (productId == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        Product product = productMapper.selectByPrimaryKey(productId);        if (product == null) {            return ServerResponse.createByErrorMessage("商品不存在或已下架");        }        ProductDetailVo productDetailVo = assembleProductDetailVo(product);        return ServerResponse.createBySuccess(productDetailVo);    }    @Override    public ServerResponse<PageInfo> getProductList(int pageNum, int pageSize) {        PageHelper.startPage(pageNum, pageSize);        List<Product> productList = productMapper.selectList();        List<ProductListVo> productListVoList = Lists.newArrayList();        for (Product product : productList) {            productListVoList.add(assembleProductListVo(product));        }        PageInfo pageInfo = new PageInfo(productList);        pageInfo.setList(productListVoList);        return ServerResponse.createBySuccess(pageInfo);    }    @Override    public ServerResponse<PageInfo> searchProduct(String productName, Integer productId, int pageNum, int pageSize) {        PageHelper.startPage(pageNum, pageSize);        if (StringUtils.isNotBlank(productName)) {            productName = new StringBuilder().append("%").append(productName).append("%").toString();        }        List<Product> productList = productMapper.selectProductByProductNameAndProductId(productName, productId);        List<ProductListVo> productListVoList = Lists.newArrayList();        for (Product product : productList) {            productListVoList.add(assembleProductListVo(product));        }        PageInfo pageInfo = new PageInfo(productList);        pageInfo.setList(productListVoList);        return ServerResponse.createBySuccess(pageInfo);    }    @Override    public ServerResponse<ProductDetailVo> getProductDetail(Integer productId) {        if (productId == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        Product product = productMapper.selectByPrimaryKey(productId);        if (product == null) {            return ServerResponse.createByErrorMessage("商品不存在或已下架");        }        if(product.getStatus() != Const.ProductStatus.ON_SALE.getCode()){            return ServerResponse.createByErrorMessage("商品不存在或已下架");        }        ProductDetailVo productDetailVo = assembleProductDetailVo(product);        return ServerResponse.createBySuccess(productDetailVo);    }    @Override    public ServerResponse<PageInfo> getProductByKeywordCategoryId(String keyword, Integer categoryId, int pageNum, int pageSize, String orderBy) {        if(StringUtils.isBlank(keyword) && categoryId == null){            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        List<Integer> categoryIdList = new ArrayList<>();        if(categoryId != null){            Category category = categoryMapper.selectByPrimaryKey(categoryId);            if(category == null && StringUtils.isBlank(keyword)){                //没有该分类，并且还没有关键字，这个时候返回一个空集合，不报错                PageHelper.startPage(pageNum, pageSize);                List<ProductListVo> productListVoList = Lists.newArrayList();                PageInfo pageInfo = new PageInfo(productListVoList);                return ServerResponse.createBySuccess(pageInfo);            }            categoryIdList = iCategoryService.selectCategoryAndChildrenById(categoryId).getData();        }        if(StringUtils.isNotBlank(keyword)){            keyword = new StringBuilder().append("%").append(keyword).append("%").toString();        }        PageHelper.startPage(pageNum, pageSize);        //排序处理        if(StringUtils.isNotBlank(orderBy)){            if(Const.ProductListOrderBy.PRICE_ASC_DESC.contains(orderBy)){                String[] orderByArray = orderBy.split("_");                PageHelper.orderBy(orderByArray[0] + " " + orderByArray[1]);            }        }        List<Product> productList = productMapper.selectByNameAndCategoryIds(keyword, categoryIdList);        List<ProductListVo> productListVoList = Lists.newArrayList();        for (Product product: productList) {            productListVoList.add(assembleProductListVo(product));        }        PageInfo pageInfo = new PageInfo(productList);        pageInfo.setList(productListVoList);        return ServerResponse.createBySuccess(pageInfo);    }    //将Product组装成ProductDetailVo    private ProductDetailVo assembleProductDetailVo(Product product) {        ProductDetailVo productDetailVo = new ProductDetailVo();        productDetailVo.setId(product.getId());        productDetailVo.setCategoryId(product.getCategoryId());        productDetailVo.setName(product.getName());        productDetailVo.setSubtitle(product.getSubtitle());        productDetailVo.setMainImage(product.getMainImage());        productDetailVo.setSubImages(product.getSubImages());        productDetailVo.setDetail(product.getDetail());        productDetailVo.setPrice(product.getPrice());        productDetailVo.setStock(product.getStock());        productDetailVo.setStatus(product.getStatus());        //MyBatis返回的是时间戳，需要转换格式返回给前端        productDetailVo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));        productDetailVo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime()));        productDetailVo.setImageHost(PropertiesUtil.getProperty("ftp.server.http.prefix", "http://123.57.166.10/"));        // Integer parentCategoryId;        Category category = categoryMapper.selectByPrimaryKey(product.getCategoryId());        if (category == null) {            //默认根节点            productDetailVo.setParentCategoryId(0);        }        productDetailVo.setParentCategoryId(category.getParentId());        return productDetailVo;    }    //将Product组装成ProductListVo    private ProductListVo assembleProductListVo(Product product) {        ProductListVo productListVo = new ProductListVo();        productListVo.setId(product.getId());        productListVo.setCategoryId(product.getCategoryId());        productListVo.setName(product.getName());        productListVo.setSubtitle(product.getSubtitle());        productListVo.setMainImage(product.getMainImage());        productListVo.setStatus(product.getStatus());        productListVo.setPrice(product.getPrice());        productListVo.setImageHost(PropertiesUtil.getProperty("ftp.server.http.prefix", "http://123.57.166.10/"));        return productListVo;    }}