package com.mmall.service.impl;import com.google.common.base.Splitter;import com.mmall.common.Const;import com.mmall.common.ResponseCode;import com.mmall.common.ServerResponse;import com.mmall.dao.CartMapper;import com.mmall.dao.ProductMapper;import com.mmall.pojo.Cart;import com.mmall.pojo.Product;import com.mmall.service.ICartService;import com.mmall.util.BigDecimalUtil;import com.mmall.vo.CartProductVo;import com.mmall.vo.CartVo;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.List;/** * @author chenqiang * @create 2020-07-03 11:59 */@Servicepublic class CartServiceImpl implements ICartService {    @Autowired    private CartMapper cartMapper;    @Autowired    private ProductMapper productMapper;    @Override    public ServerResponse<CartVo> addProduct(Integer userId, Integer productId, Integer count) {        if (productId == null || count == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        //首先查询次商品在购物车中是否存在，不存在的话就新增一个，存在的话加数量        Cart cart = cartMapper.selectCartByUserIdProductId(userId,productId);        if (cart == null) {            //这个商品不在这个购物车里，需要新增一个这个产品的记录            Cart cartItem = new Cart();            cartItem.setUserId(userId);            cartItem.setProductId(productId);            cartItem.setQuantity(count);            cartItem.setChecked(Const.Cart.CHECKED);            cartItem.setCreateTime(new Date());            cartItem.setUpdateTime(new Date());            cartMapper.insertSelective(cartItem);        } else {            //这个产品已经在购物车里了，添加数量即可            cart.setQuantity(cart.getQuantity() + count);            cartMapper.updateByPrimaryKey(cart);        }        return this.list(userId);    }    @Override    public ServerResponse<CartVo> list(Integer userId) {        if(userId == null){            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        return ServerResponse.createBySuccess(this.getCartVoLimit(userId));    }    @Override    public ServerResponse<CartVo> update(Integer userId, Integer productId, Integer count) {        if (productId == null || count == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        Cart cart = cartMapper.selectCartByUserIdProductId(userId,productId);        if(cart != null){            cart.setQuantity(count);        }        cartMapper.updateByPrimaryKey(cart);        return this.list(userId);    }    @Override    public ServerResponse<CartVo> delete(Integer userId, String productIds) {        List<String> productIdList = Splitter.on(",").splitToList(productIds);        if(CollectionUtils.isEmpty(productIdList)){            return ServerResponse.createByErrorCodeMessage(ResponseCode.ILLEGAL_ARGUMENT.getCode(), ResponseCode.ILLEGAL_ARGUMENT.getDesc());        }        cartMapper.deleteByUserIdProductIds(userId,productIdList);        return this.list(userId);    }    @Override    public ServerResponse<CartVo> selectOrUnSelect(Integer userId, Integer productId, Integer checked) {        cartMapper.checkedOrUncheckedProduct(userId, productId, checked);        return this.list(userId);    }    @Override    public ServerResponse<Integer> getCartProductCount(Integer userId) {        if(userId == null){            return ServerResponse.createBySuccess(0);        }        return ServerResponse.createBySuccess(cartMapper.selectCartProductCount(userId));    }    private CartVo getCartVoLimit(Integer userId){        //CartVo --> List<CartProductVo> --> Cart + Product        CartVo cartVo = new CartVo();        List<Cart> cartList = cartMapper.selectCartByUserId(userId);        List<CartProductVo> cartProductVoList = new ArrayList<>();        BigDecimal cartTotalPrice = new BigDecimal("0");        if(CollectionUtils.isNotEmpty(cartList)){            for (Cart cartItem: cartList) {                CartProductVo cartProductVo = new CartProductVo();                cartProductVo.setId(cartItem.getId());                cartProductVo.setProductId(cartItem.getProductId());                cartProductVo.setUserId(userId);                Product product = productMapper.selectByPrimaryKey(cartItem.getProductId());                if(product != null){                    cartProductVo.setProductName(product.getName());                    cartProductVo.setProductSubtitle(product.getSubtitle());                    cartProductVo.setProductMainImage(product.getMainImage());                    cartProductVo.setProductStatus(product.getStatus());                    cartProductVo.setProductPrice(product.getPrice());                    cartProductVo.setProductStock(product.getStock());                }                //判断库存                int buyLimitCount = 0;                if(product.getStock() >= cartItem.getQuantity() ){                    //库存充足的时候                    buyLimitCount = cartItem.getQuantity();                    cartProductVo.setLimitQuantity(Const.Cart.LIMIT_NUM_SUCCESS);                }else{                    //库存不足的时候                    buyLimitCount = product.getStock();                    cartProductVo.setLimitQuantity(Const.Cart.LIMIT_NUM_FAIL);                    //购物车中更新有效库存                    Cart cartForQuantity = new Cart();                    cartForQuantity.setId(cartItem.getId());                    cartForQuantity.setQuantity(product.getStock());                    cartMapper.updateByPrimaryKey(cartForQuantity);                }                cartProductVo.setQuantity(buyLimitCount);                //计算总价                cartProductVo.setProductTotalPrice(BigDecimalUtil.mul(product.getPrice().doubleValue(),cartProductVo.getQuantity()));                cartProductVo.setProductChecked(cartItem.getChecked());                if(cartItem.getChecked() == Const.Cart.CHECKED){                    //如果已经勾选，增加到整个购物车总价中                    cartTotalPrice = BigDecimalUtil.add(cartProductVo.getProductTotalPrice().doubleValue(),cartTotalPrice.doubleValue());                }                cartProductVoList.add(cartProductVo);            }        }        cartVo.setCartProductVoList(cartProductVoList);        cartVo.setCartTotalPrice(cartTotalPrice);        cartVo.setAllChecked(this.isAllCheckedStatus(userId));        return cartVo;    }    private boolean isAllCheckedStatus(Integer userId){        if(userId == null){            return false;        }        return cartMapper.selectCartProductCheckedStatusByUserId(userId) == 0;    }}