package com.mmall.controller.backend;import com.github.pagehelper.PageInfo;import com.mmall.common.Const;import com.mmall.common.ResponseCode;import com.mmall.common.ServerResponse;import com.mmall.pojo.User;import com.mmall.service.IOrderService;import com.mmall.service.IUserService;import com.mmall.util.PropertiesUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpSession;import java.util.HashMap;import java.util.Map;/** * @author chenqiang * @create 2020-07-13 16:18 */@RestController@RequestMapping("/manage/order")public class OrderManageController {    @Autowired    private IUserService iUserService;    @Autowired    private IOrderService iOrderService;    @RequestMapping("list.do")    public ServerResponse<PageInfo> orderList(HttpSession session,                                              @RequestParam(value = "pageNum", defaultValue = "1") int pageNum,                                              @RequestParam(value = "pageSize", defaultValue = "10") int pageSize) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录管理员");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            return iOrderService.manageList(pageNum, pageSize);        } else {            return ServerResponse.createByErrorMessage("不是管理员，无权限操作");        }    }    @RequestMapping("detail.do")    public ServerResponse orderDetail(HttpSession session, Long orderNo) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录管理员");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            return iOrderService.manageOrderDetail(orderNo);        } else {            return ServerResponse.createByErrorMessage("不是管理员，无权限操作");        }    }    @RequestMapping("search.do")    public ServerResponse<PageInfo> orderSearch(HttpSession session, Long orderNo,                                                @RequestParam(value = "pageNum", defaultValue = "1") int pageNum,                                                @RequestParam(value = "pageSize", defaultValue = "10") int pageSize) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录管理员");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            return iOrderService.manageOrderSearch(orderNo, pageNum, pageSize);        } else {            return ServerResponse.createByErrorMessage("不是管理员，无权限操作");        }    }    @RequestMapping("send_goods.do")    public ServerResponse<PageInfo> sendGoods(HttpSession session, Long orderNo) {        User user = (User) session.getAttribute(Const.CURRENT_USER);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "用户未登录，请登录管理员");        }        if (iUserService.checkAdminRole(user).isSuccess()) {            return iOrderService.manageSendGoods(orderNo);        } else {            return ServerResponse.createByErrorMessage("不是管理员，无权限操作");        }    }}