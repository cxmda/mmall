package com.mmall.controller.portal;import com.alipay.api.AlipayApiException;import com.alipay.api.internal.util.AlipaySignature;import com.alipay.demo.trade.config.Configs;import com.google.common.collect.Maps;import com.mmall.common.Const;import com.mmall.common.ResponseCode;import com.mmall.common.ServerResponse;import com.mmall.pojo.User;import com.mmall.service.IOrderService;import com.mmall.util.CookieUtil;import com.mmall.util.JsonUtil;import com.mmall.util.RedisShardedPoolUtil;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import java.util.Iterator;import java.util.Map;/** * @author chenqiang * @create 2020-07-10 15:03 */@RestController@RequestMapping("/order")@Slf4jpublic class OrderController {    @Autowired    private IOrderService iOrderService;    @RequestMapping("create.do")    public ServerResponse create(HttpServletRequest httpServletRequest, Integer shippingId) {        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisShardedPoolUtil.get(loginToken);        User user = JsonUtil.string2Obj(userJsonStr, User.class);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), ResponseCode.NEED_LOGIN.getDesc());        }        return iOrderService.createOrder(user.getId(), shippingId);    }    @RequestMapping("cancel.do")    public ServerResponse cancel(HttpServletRequest httpServletRequest, Long orderNo) {        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisShardedPoolUtil.get(loginToken);        User user = JsonUtil.string2Obj(userJsonStr, User.class);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), ResponseCode.NEED_LOGIN.getDesc());        }        return iOrderService.cancelOrder(user.getId(), orderNo);    }    @RequestMapping("get_order_cart_product.do")    public ServerResponse getOrderCartProduct(HttpServletRequest httpServletRequest) {        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisShardedPoolUtil.get(loginToken);        User user = JsonUtil.string2Obj(userJsonStr, User.class);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), ResponseCode.NEED_LOGIN.getDesc());        }        return iOrderService.getOrderCartProduct(user.getId());    }    @RequestMapping("detail.do")    public ServerResponse detail(HttpServletRequest httpServletRequest, Long orderNo) {        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisShardedPoolUtil.get(loginToken);        User user = JsonUtil.string2Obj(userJsonStr, User.class);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), ResponseCode.NEED_LOGIN.getDesc());        }        return iOrderService.getOrderDetail(user.getId(), orderNo);    }    @RequestMapping("list.do")    public ServerResponse list(HttpServletRequest httpServletRequest,                               @RequestParam(value = "pageNum", defaultValue = "10") int pageNum,                               @RequestParam(value = "pageSize", defaultValue = "1") int pageSize) {        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisShardedPoolUtil.get(loginToken);        User user = JsonUtil.string2Obj(userJsonStr, User.class);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), ResponseCode.NEED_LOGIN.getDesc());        }        return iOrderService.getOrderList(user.getId(),pageNum,pageSize);    }    @RequestMapping("pay.do")    public ServerResponse pay(HttpServletRequest httpServletRequest, Long orderNo, HttpServletRequest request) {        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisShardedPoolUtil.get(loginToken);        User user = JsonUtil.string2Obj(userJsonStr, User.class);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), ResponseCode.NEED_LOGIN.getDesc());        }        String path = request.getServletContext().getRealPath("upload");        return iOrderService.pay(orderNo, user.getId(), path);    }    @RequestMapping("alipay_callback.do")    public Object alipayCallback(HttpServletRequest request) {        Map<String, String> params = Maps.newHashMap();        Map requestParams = request.getParameterMap();        for (Iterator iterator = requestParams.keySet().iterator(); iterator.hasNext(); ) {            String name = (String) iterator.next();            String[] values = (String[]) requestParams.get(name);            String valueStr = "";            for (int i = 0; i < values.length; i++) {                valueStr = (i == values.length - 1) ? valueStr + values[i] : valueStr + values[i] + ",";            }            params.put(name, valueStr);        }        log.info("支付宝回调,sign{},trade_status,参数{}", params.get("sign"), params.get("trade_status"), params);        //验证回调的正确性，是不是支付宝发的，并且还要避免重复通知        params.remove("sign_type");        try {            boolean rsaCheckV2 = AlipaySignature.rsaCheckV2(params, Configs.getAlipayPublicKey(), "utf-8", Configs.getSignType());            if (!rsaCheckV2) {                return ServerResponse.createByErrorMessage("非法请求，验证不通过，再恶意请求我就报警了");            }        } catch (AlipayApiException e) {            log.error("支付宝验证回调异常", e);        }        //todo 验证各种数据        /**         * 商户需要验证该通知数据中的 out_trade_no 是否为商户系统中创建的订单号；         * 判断 total_amount 是否确实为该订单的实际金额（即商户订单创建时的金额）；         * 校验通知中的 seller_id（或者seller_email) 是否为 out_trade_no 这笔单据的对应的操作方（有的时候，一个商户可能有多个 seller_id/seller_email）。         */        ServerResponse serverResponse = iOrderService.aliCallback(params);        if (serverResponse.isSuccess()) {            return Const.AlipayCallback.RESPONSE_SUCCESS;        }        return Const.AlipayCallback.RESPONSE_FAILED;    }    @RequestMapping("query_order_pay_status.do")    public ServerResponse<Boolean> queryOrderPayStatus(HttpServletRequest httpServletRequest, Long orderNo) {        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisShardedPoolUtil.get(loginToken);        User user = JsonUtil.string2Obj(userJsonStr, User.class);        if (user == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), ResponseCode.NEED_LOGIN.getDesc());        }        ServerResponse serverResponse = iOrderService.queryOrderPayStatus(user.getId(), orderNo);        if (serverResponse.isSuccess()) {            return ServerResponse.createBySuccess(true);        }        return ServerResponse.createBySuccess(false);    }}