package com.mmall.controller.portal;import com.mmall.common.Const;import com.mmall.common.ResponseCode;import com.mmall.common.ServerResponse;import com.mmall.pojo.User;import com.mmall.service.IUserService;import com.mmall.util.CookieUtil;import com.mmall.util.JsonUtil;import com.mmall.util.RedisPoolUtil;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;/** * @author chenqiang * @create 2020-06-28 11:31 */@RestController@RequestMapping("/user")public class UserController {    @Autowired    private IUserService iUserService;    /**     * 用户登录     *     * @param username     * @param password     * @return     */    @RequestMapping(value = "login.do", method = RequestMethod.POST)    public ServerResponse<User> login(String username, String password, HttpSession session, HttpServletResponse httpServletResponse) {        ServerResponse<User> response = iUserService.login(username, password);        if (response.isSuccess()) {            //session.setAttribute(Const.CURRENT_USER, response.getData());            CookieUtil.writeLoginToken(httpServletResponse, session.getId());            RedisPoolUtil.setEx(session.getId(), JsonUtil.obj2String(response.getData()), Const.RedisCacheExtime.REDIS_SESSION_EXTIME);        }        return response;    }    /**     * 用户登出     *     * @return     */    @RequestMapping(value = "logout.do", method = RequestMethod.POST)    public ServerResponse<String> logout(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) {        //session.removeAttribute(Const.CURRENT_USER);        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        CookieUtil.delLoginToken(httpServletRequest, httpServletResponse);        RedisPoolUtil.del(loginToken);        return ServerResponse.createBySuccess();    }    /**     * 用户注册     *     * @param user     * @return     */    @RequestMapping(value = "register.do", method = RequestMethod.POST)    public ServerResponse<String> register(User user) {        return iUserService.register(user);    }    /**     * 校验用户名和email     *     * @param str     * @param type     * @return     */    @RequestMapping(value = "check_valid.do", method = RequestMethod.POST)    public ServerResponse<String> checkValid(String str, String type) {        return iUserService.checkValid(str, type);    }    /**     * 获取用户信息     *     * @return     */    @RequestMapping(value = "get_user_info.do", method = RequestMethod.POST)    public ServerResponse<User> getUserInfo(HttpServletRequest httpServletRequest) {        //User user = (User) session.getAttribute(Const.CURRENT_USER);        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisPoolUtil.get(loginToken);        User user = JsonUtil.string2Obj(userJsonStr, User.class);        if (user != null) {            return ServerResponse.createBySuccess(user);        }        return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");    }    /**     * 获取问题     *     * @param username     * @return     */    @RequestMapping(value = "forget_get_question.do", method = RequestMethod.POST)    public ServerResponse<String> forgetGetQuestion(String username) {        return iUserService.selectQuestion(username);    }    /**     * 检查问题答案是否正确     *     * @param username     * @param question     * @param answer     * @return     */    @RequestMapping(value = "forget_check_answer.do", method = RequestMethod.POST)    public ServerResponse<String> forgetCheckAnswer(String username, String question, String answer) {        return iUserService.checkAnswer(username, question, answer);    }    /**     * 修改密码（未登录）     *     * @param username     * @param newPassword     * @param forgetToken     * @return     */    @RequestMapping(value = "forget_reset_password.do", method = RequestMethod.POST)    public ServerResponse<String> forgetResetPassword(String username, String newPassword, String forgetToken) {        return iUserService.forgetResetPassword(username, newPassword, forgetToken);    }    /**     * 修改密码（已登录）     *     * @param oldPassword     * @param newPassword     * @return     */    @RequestMapping(value = "reset_password.do", method = RequestMethod.POST)    public ServerResponse<String> resetPassword(HttpServletRequest httpServletRequest, String oldPassword, String newPassword) {        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisPoolUtil.get(loginToken);        User user = JsonUtil.string2Obj(userJsonStr, User.class);        if (user == null) {            return ServerResponse.createByErrorMessage("用户未登录");        }        return iUserService.resetPassword(oldPassword, newPassword, user);    }    /**     * 更新用户个人信息     *     * @param user     * @return     */    @RequestMapping(value = "update_information.do", method = RequestMethod.POST)    public ServerResponse<User> updateInformation(HttpServletRequest httpServletRequest, User user) {        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisPoolUtil.get(loginToken);        User currentUser = JsonUtil.string2Obj(userJsonStr, User.class);        if (currentUser == null) {            return ServerResponse.createByErrorMessage("用户未登录");        }        user.setId(currentUser.getId());        user.setUsername(currentUser.getUsername());        ServerResponse<User> response = iUserService.updateInformation(user);        if (response.isSuccess()) {            response.getData().setUsername(currentUser.getUsername());            RedisPoolUtil.setEx(loginToken,JsonUtil.obj2String(response.getData()),Const.RedisCacheExtime.REDIS_SESSION_EXTIME);        }        return response;    }    /**     * 获取用户个人信息     *     * @return     */    @RequestMapping(value = "get_information.do", method = RequestMethod.POST)    public ServerResponse<User> getInformation(HttpServletRequest httpServletRequest) {        String loginToken = CookieUtil.readLoginToken(httpServletRequest);        if (StringUtils.isEmpty(loginToken)) {            return ServerResponse.createByErrorMessage("用户没有登录，无法获取当前用户信息");        }        String userJsonStr = RedisPoolUtil.get(loginToken);        User currentUser = JsonUtil.string2Obj(userJsonStr, User.class);        if (currentUser == null) {            return ServerResponse.createByErrorCodeMessage(ResponseCode.NEED_LOGIN.getCode(), "未登录，需要强制登录status=10");        }        return iUserService.getInformation(currentUser.getId());    }}